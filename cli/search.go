package cli

import (
	"fmt"

	"github.com/blevesearch/bleve"
	_ "github.com/blevesearch/bleve/search/highlight/highlighters/ansi"
	"github.com/spf13/cobra"
)

const requiredLength = 7

var queryName = []string{"Description", "Author", "Platform", "Type", "Port"}

// BuildSearchCommand returns a new reference to a search command.
func BuildSearchCommand() *cobra.Command {
	var dbFile string
	var limit, offset int
	var query bleve.Query

	cmd := &cobra.Command{
		Use:   "search <term>",
		Short: "Search for exploits.",
		Run: func(cmd *cobra.Command, args []string) {
			index, _ := bleve.Open(dbFile)
			term := args[0]

			query = bleve.NewMatchQuery(term)

			search := bleve.NewSearchRequest(query)
			search.Size = limit
			search.From = offset
			search.Highlight = bleve.NewHighlightWithStyle("ansi")
			search.Fields = []string{"*"}

			searchResults, err := index.Search(search)
			check(err)

			for _, hit := range searchResults.Hits {
				fmt.Println("###########################################")
				fmt.Println(hit.ID)

				description := hit.Fields["Description"]
				if fragment, ok := hit.Fragments["Description"]; ok {
					description = fragment[0]
				}
				fmt.Printf("Description: %s\n", description)
				fmt.Printf("Type: %s\n", hit.Fields["Type"])
			}

			fmt.Printf("Showing entries %d-%d of %d. Completed in %s\n", offset+1, offset+limit, searchResults.Total, searchResults.Took)
		},
	}

	cmd.Flags().StringVarP(&dbFile, "db-file", "d", defaultDbFile(), "vulnerability db file to use")
	cmd.Flags().IntVarP(&limit, "limit", "l", 10, "number of results to display")
	cmd.Flags().IntVarP(&offset, "from", "f", 0, "start results from number")

	return cmd
}
